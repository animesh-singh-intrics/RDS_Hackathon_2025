/**
 * Unified Dashboard Renderer Component
 * Renders complete dashboard configurations generated by the UnifiedDashboardService
 */

import React, { useEffect, useRef } from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  RadialLinearScale,
} from 'chart.js';
import { Bar, Line, Pie, Doughnut, Scatter, Radar, PolarArea } from 'react-chartjs-2';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  RadialLinearScale
);

// Dashboard configuration interfaces (imported from service)
interface DashboardConfig {
  dashboard: DashboardMetadata;
  kpis: KPICard[];
  charts: ChartConfig[];
}

interface DashboardMetadata {
  title: string;
  subtitle?: string;
  theme: {
    primaryColor: string;
    secondaryColor: string;
    backgroundColor: string;
    textColor: string;
    fontFamily: string;
  };
  layout: {
    grid: string;
    sections: string[];
    responsive: boolean;
  };
}

interface KPICard {
  id: string;
  label: string;
  value: string | number;
  format: 'number' | 'currency' | 'percentage' | 'text';
  trend?: {
    direction: 'up' | 'down' | 'neutral';
    percentage: number;
    period?: string;
  };
  styling: {
    backgroundColor: string;
    textColor: string;
  };
  position?: {
    row: number;
    col: number;
    span?: number;
  };
}

interface ChartConfig {
  id: string;
  type: 'bar' | 'line' | 'pie' | 'doughnut' | 'scatter' | 'radar' | 'polarArea';
  title: string;
  position?: {
    row: number;
    col: number;
    span?: number;
  };
  data: {
    labels: string[];
    datasets: ChartDataset[];
  };
  options: ChartOptions;
  styling?: {
    colors: string[];
    borderRadius?: string;
    shadow?: boolean;
  };
}

interface ChartDataset {
  label: string;
  data: number[] | {x: number, y: number}[];
  backgroundColor: string | string[];
  borderColor?: string | string[];
  borderWidth?: number;
  fill?: boolean;
  tension?: number;
}

interface ChartOptions {
  responsive: boolean;
  maintainAspectRatio: boolean;
  plugins?: {
    title?: {
      display: boolean;
      text: string;
    };
    legend?: {
      display: boolean;
      position?: 'top' | 'bottom' | 'left' | 'right';
    };
  };
  scales?: {
    x?: {
      beginAtZero?: boolean;
      title?: {
        display: boolean;
        text: string;
      };
    };
    y?: {
      beginAtZero?: boolean;
      title?: {
        display: boolean;
        text: string;
      };
    };
  };
}

interface UnifiedDashboardRendererProps {
  config: DashboardConfig;
  className?: string;
}

// Chart type mapping for react-chartjs-2
const ChartTypeComponents = {
  bar: Bar,
  line: Line,
  pie: Pie,
  doughnut: Doughnut,
  scatter: Scatter,
  radar: Radar,
  polarArea: PolarArea
};

/**
 * KPI Card Component
 */
const KPICardComponent: React.FC<{ kpi: KPICard; theme: DashboardMetadata['theme'] }> = ({ kpi, theme }) => {
  const formatKPIValue = (value: string | number, format: string): string => {
    switch (format) {
      case 'currency':
        return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(Number(value));
      case 'percentage':
        return `${value}%`;
      case 'number':
        return new Intl.NumberFormat('en-US').format(Number(value));
      default:
        return String(value);
    }
  };

  const getTrendIcon = (direction: string): string => {
    switch (direction) {
      case 'up': return '↗️';
      case 'down': return '↘️';
      default: return '➡️';
    }
  };

  const getTrendColor = (direction: string): string => {
    switch (direction) {
      case 'up': return '#10b981';
      case 'down': return '#ef4444';
      default: return '#64748b';
    }
  };

  return (
    <div 
      style={{
        background: kpi.styling.backgroundColor,
        color: kpi.styling.textColor,
        padding: '25px',
        borderRadius: '12px',
        textAlign: 'center' as const,
        boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
        borderLeft: `4px solid ${theme.primaryColor}`
      }}
    >
      <div 
        style={{
          fontSize: '2.5rem',
          fontWeight: 700,
          color: kpi.styling.textColor,
          marginBottom: '8px'
        }}
      >
        {formatKPIValue(kpi.value, kpi.format)}
      </div>
      <div 
        style={{
          color: kpi.styling.textColor,
          fontSize: '1rem',
          fontWeight: 500,
          marginBottom: '8px',
          opacity: 0.8
        }}
      >
        {kpi.label}
      </div>
      {kpi.trend && (
        <div 
          style={{
            fontSize: '0.9rem',
            fontWeight: 500,
            color: getTrendColor(kpi.trend.direction),
            opacity: 0.9
          }}
        >
          {getTrendIcon(kpi.trend.direction)} {kpi.trend.percentage}% {kpi.trend.period || ''}
        </div>
      )}
    </div>
  );
};

/**
 * Chart Component
 */
const ChartComponent: React.FC<{ chart: ChartConfig; theme: DashboardMetadata['theme'] }> = ({ chart, theme }) => {
  const ChartElement = ChartTypeComponents[chart.type];
  
  if (!ChartElement) {
    return (
      <div style={{ padding: '20px', textAlign: 'center', color: '#ef4444' }}>
        Unsupported chart type: {chart.type}
      </div>
    );
  }

  const chartOptions = {
    ...chart.options,
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      ...chart.options.plugins,
      title: {
        display: true,
        text: chart.title,
        font: {
          size: 16,
          weight: 'bold' as const
        },
        color: theme.textColor
      }
    }
  };

  return (
    <div 
      style={{
        background: 'white',
        padding: '30px',
        borderRadius: '12px',
        boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
        height: '400px'
      }}
    >
      <ChartElement data={chart.data} options={chartOptions} />
    </div>
  );
};



/**
 * Main Unified Dashboard Renderer Component
 */
export const UnifiedDashboardRenderer: React.FC<UnifiedDashboardRendererProps> = ({ 
  config, 
  className = '' 
}) => {
  const { dashboard, kpis, charts } = config;
  const containerRef = useRef<HTMLDivElement>(null);

  // Apply theme to container
  useEffect(() => {
    if (containerRef.current) {
      const container = containerRef.current;
      container.style.fontFamily = dashboard.theme.fontFamily;
      container.style.background = dashboard.theme.backgroundColor;
      container.style.color = dashboard.theme.textColor;
    }
  }, [dashboard.theme]);

  return (
    <div 
      ref={containerRef}
      className={`unified-dashboard ${className}`}
      style={{
        fontFamily: dashboard.theme.fontFamily,
        background: dashboard.theme.backgroundColor,
        color: dashboard.theme.textColor,
        padding: '20px',
        lineHeight: 1.6,
        maxWidth: '1400px',
        margin: '0 auto'
      }}
    >
      {/* Dashboard Header */}
      <div 
        style={{
          background: `linear-gradient(135deg, ${dashboard.theme.primaryColor}, ${dashboard.theme.secondaryColor})`,
          color: 'white',
          padding: '30px',
          borderRadius: '12px',
          textAlign: 'center' as const,
          marginBottom: '30px',
          boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
        }}
      >
        <h1 
          style={{
            fontSize: '2.5rem',
            fontWeight: 700,
            marginBottom: '10px',
            margin: 0
          }}
        >
          {dashboard.title}
        </h1>
        {dashboard.subtitle && (
          <p 
            style={{
              fontSize: '1.1rem',
              opacity: 0.9,
              margin: 0
            }}
          >
            {dashboard.subtitle}
          </p>
        )}
      </div>

      {/* KPI Grid */}
      {kpis && kpis.length > 0 && (
        <div 
          style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
            gap: '20px',
            marginBottom: '30px'
          }}
        >
          {kpis.map((kpi) => (
            <KPICardComponent key={kpi.id} kpi={kpi} theme={dashboard.theme} />
          ))}
        </div>
      )}

      {/* Charts Grid */}
      {charts && charts.length > 0 && (
        <div 
          style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))',
            gap: '30px',
            marginBottom: '30px'
          }}
        >
          {charts.map((chart) => (
            <ChartComponent key={chart.id} chart={chart} theme={dashboard.theme} />
          ))}
        </div>
      )}
    </div>
  );
};

export default UnifiedDashboardRenderer;